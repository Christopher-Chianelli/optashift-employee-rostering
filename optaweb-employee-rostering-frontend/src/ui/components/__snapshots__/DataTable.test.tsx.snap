// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataTable component should render correctly with a few rows 1`] = `
<Fragment>
  <PagenationControls
    columns={
      Array [
        Object {
          "name": "Column 1",
        },
        Object {
          "name": "Column 2",
        },
      ]
    }
    filterText=""
    filteredRows={
      Immutable.List [
        Object {
          "name": "More Data",
          "number": 2,
        },
        Object {
          "name": "Some Data",
          "number": 1,
        },
      ]
    }
    history={
      Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "pathname": "/table",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    isCreatingNewRow={false}
    isReversed={true}
    itemsPerPage={5}
    location={
      Object {
        "hash": "",
        "pathname": "/table",
        "search": "",
        "state": undefined,
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {},
        "path": "/table",
        "url": "localhost:8080/table",
      }
    }
    numOfFilteredRows={2}
    onCreateNewRow={[Function]}
    onSorterChange={[MockFunction]}
    page={1}
    rowWrapper={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "name": "More Data",
              "number": 2,
            },
          ],
          Array [
            Object {
              "name": "Some Data",
              "number": 1,
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    rowsInPage={
      Immutable.List [
        Object {
          "name": "More Data",
          "number": 2,
        },
        Object {
          "name": "Some Data",
          "number": 1,
        },
      ]
    }
    sortByIndex={0}
    title="Data Table"
  />
  <TableComposable>
    <caption>
      Data Table
    </caption>
    <thead>
      <tr
        role="row"
      >
        <th
          key="Column 1"
          role="columnheader"
          scope="col"
        >
          <Button
            onClick={[Function]}
            variant="plain"
          >
            <div
              className="pf-c-table__button-content"
            >
              <span
                className="pf-c-table__text"
              >
                Column 1
              </span>
            </div>
          </Button>
        </th>
        <th
          key="Column 2"
          role="columnheader"
          scope="col"
        >
          <Button
            onClick={[Function]}
            variant="plain"
          >
            <div
              className="pf-c-table__button-content"
            >
              <span
                className="pf-c-table__text"
              >
                Column 2
              </span>
            </div>
          </Button>
        </th>
        <th
          role="columnheader"
          scope="col"
        />
      </tr>
    </thead>
    <tbody />
  </TableComposable>
</Fragment>
`;

exports[`DataTable component should render correctly with no rows 1`] = `
<Fragment>
  <PagenationControls
    columns={
      Array [
        Object {
          "name": "Column 1",
        },
        Object {
          "name": "Column 2",
        },
      ]
    }
    filterText=""
    filteredRows={Immutable.List []}
    history={
      Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "pathname": "/table",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    isCreatingNewRow={false}
    isReversed={true}
    itemsPerPage={5}
    location={
      Object {
        "hash": "",
        "pathname": "/table",
        "search": "",
        "state": undefined,
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {},
        "path": "/table",
        "url": "localhost:8080/table",
      }
    }
    numOfFilteredRows={0}
    onCreateNewRow={[Function]}
    onSorterChange={[MockFunction]}
    page={1}
    rowWrapper={[MockFunction]}
    rowsInPage={Immutable.List []}
    sortByIndex={0}
    title="Data Table"
  />
  <TableComposable>
    <caption>
      Data Table
    </caption>
    <thead>
      <tr
        role="row"
      >
        <th
          key="Column 1"
          role="columnheader"
          scope="col"
        >
          <Button
            onClick={[Function]}
            variant="plain"
          >
            <div
              className="pf-c-table__button-content"
            >
              <span
                className="pf-c-table__text"
              >
                Column 1
              </span>
            </div>
          </Button>
        </th>
        <th
          key="Column 2"
          role="columnheader"
          scope="col"
        >
          <Button
            onClick={[Function]}
            variant="plain"
          >
            <div
              className="pf-c-table__button-content"
            >
              <span
                className="pf-c-table__text"
              >
                Column 2
              </span>
            </div>
          </Button>
        </th>
        <th
          role="columnheader"
          scope="col"
        />
      </tr>
    </thead>
    <tbody />
  </TableComposable>
</Fragment>
`;
